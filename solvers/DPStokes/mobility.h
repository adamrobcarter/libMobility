/*Raul P. Pelaez 2022. libMobility interface for UAMMD's DPStokes module
 */
#ifndef MOBILITY_SELFMOBILITY_H
#define MOBILITY_SELFMOBILITY_H
#include <MobilityInterface/MobilityInterface.h>
#include"extra/uammd_interface.h"
#include<vector>
#include<cmath>
#include<type_traits>

class DPStokes: public libmobility::Mobility{
  using periodicity_mode = libmobility::periodicity_mode;
  using Configuration = libmobility::Configuration;
  using Parameters = libmobility::Parameters;
  using DPStokesParameters = uammd_dpstokes::PyParameters;
  using real = libmobility::real;
  using DPStokesUAMMD = uammd_dpstokes::DPStokesGlue;
  Parameters par;
  int numberParticles;
  std::shared_ptr<DPStokesUAMMD> dpstokes;
  DPStokesParameters dppar;
  real temperature;
  real lanczosTolerance;
  std::uint64_t lanczosSeed;
  std::shared_ptr<LanczosStochasticVelocities> lanczos;
  std::string wallmode;
public:

  DPStokes(Configuration conf){
    if(conf.periodicityX != periodicity_mode::periodic or
       conf.periodicityY != periodicity_mode::periodic or
       not (conf.periodicityZ == periodicity_mode::open or
	    conf.periodicityZ == libmobility::periodicity_mode::single_wall or
	    conf.periodicityZ == libmobility::periodicity_mode::two_walls)
	    )
      throw std::runtime_error("[DPStokes] This is a doubly periodic solver");
    if(conf.periodicityZ == periodicity_mode::open) wallmode = "nowall";
    else if(conf.periodicityZ == periodicity_mode::single_wall) wallmode = "bottom";
    else if(conf.periodicityZ == periodicity_mode::two_walls) wallmode = "slit";
  }

  void setParametersDPStokes(DPStokesParameters i_dppar){
    this->dppar = i_dppar;
    dpstokes = std::make_shared<uammd_dpstokes::DPStokesGlue>();
  }

  double configure_grid_and_kernels_xy(Parameters ipar){
    double hydroRadius = ipar.hydrodynamicRadius[0];

    // STEP 1: set w & beta based on kernel type (Table 1/2)
    double w = 6.0; // note: should be an int but I'm scared of the consequences
    double beta = 1.714;

    // STEP 2: use c(beta*w) polyfit to get c
      // note: polyfit is to c(beta*w), not just beta
    double c_beta = polyEval(cbetam, beta*w);
    double h = hydroRadius / (w*c_beta); // compute h using h = Rh/(w*c) and nx = Lx/h
    double nx_unsafe = dppar.Lx/h; // not necessarily fft friendly

    // STEP 3: find candidates for fft friendly nx
    std::vector<int> nx_safe = fft_friendly_sizes(floor(nx_unsafe), 100, 10);
    int m = nx_safe.size();

    std::vector<double> errors(m);
    std::vector<double> h_candidates(m);
    std::vector<double> beta_candidates(m);

    int n = 1000;
    double start = w; // interpolation range
    double end = 3*w;
    std::vector<double> err_axis(n); // creates a linspace vector
    h = (end-start)/(n-1);
    std::cout << h << std::endl;
    for(int i = 0; i < n; i++){
      err_axis[i] = start + i*h;
    }

    // STEP 4: for each candidate, compute corresponding h and use c^{-1} polyfits to get beta
    // then, linearly interpolate the error spline using beta*w to get error
    for(int i = 0; i < m; i++){
      h_candidates[i] = dppar.Lx/(1.0*nx_safe[i]); // double cast
      beta_candidates[i] = polyEval(cbetam_inv, hydroRadius/(w*h_candidates[i])) / w;

      double beta_w = beta_candidates[i]*w;
      if (beta_w < w || beta_w > 3*w){ // out of range of interpolation
        errors[i] = -1;
        continue;
      }
      errors[i] = linearInterp(errmw6,err_axis,beta_w);
    }

    // pick parameters with minimum error
    int best_index = 0;
    for(int i = 1; i < m; i++){
      if(errors[i] != -1 && errors[i] < errors[best_index]){
        best_index = i;
      }
    }

    // set smallest h, beta
    this->dppar.nx = nx_safe[best_index]; 
    this->dppar.ny = nx_safe[best_index]; // assumes Lx=Ly
    this->dppar.w = w;
    this->dppar.beta = beta_candidates[best_index]*w;
    h = h_candidates[best_index];

    return h;
  }

  void configure_grid_and_kernels_z(real h, double fac=1.5){
    // fac: safety factor

    // Add a buffer of fac*w*h/2 when there is an open boundary
    double sep_up = 0;
    double sep_down = 0;
    if(this->wallmode == "nowall"){
      sep_up = fac*this->dppar.w*h/2;
      sep_down = fac*this->dppar.w*h/2;
      this->dppar.zmax += sep_up;
      this->dppar.zmin -= sep_down;
    }
    if(this->wallmode == "bottom"){
      sep_up = fac*this->dppar.w*h/2;
      this->dppar.zmax += sep_up;
    }

    double Lz = dppar.zmax - dppar.zmin;
    double H = Lz/2;

    int nz = ceil(M_PI/ (acos(-h/H) - M_PI_2) );

    // correction so 2(Nz-1) is fft friendly
    this->dppar.nz = fft_friendly_sizes(nz, 100, 1)[0] + 1;
  }

  void initialize(Parameters ipar) override{
    this->numberParticles = ipar.numberParticles;
    this->dppar.viscosity = ipar.viscosity;
    this->temperature = ipar.temperature;
    this->lanczosTolerance = ipar.tolerance;

    real h = this->configure_grid_and_kernels_xy(ipar);

    this->dppar.mode = this->wallmode;

    this->dppar.alpha = this->dppar.w/2.0; // why not (h*w)/2?
    this->dppar.tolerance = 1e-6;

    this->configure_grid_and_kernels_z(h);

    dpstokes->initialize(dppar, this->numberParticles);
    Mobility::initialize(ipar);
  }

  void setPositions(const real* ipositions) override{
    dpstokes->setPositions(ipositions);
  }

  void Mdot(const real* forces, real* result) override{
    dpstokes->Mdot(forces, nullptr, result, nullptr);
  }

  void clean() override{
    Mobility::clean();
    dpstokes->clear();
  }

  private:

  double polyEval(std::vector<double> polyCoeffs, double x){

    int order = polyCoeffs.size() - 1;
    double accumulator = polyCoeffs[order];
    double current_x = x;
    for(int i = 1; i <= order; i++){
      accumulator += polyCoeffs[order-i]*current_x;
      current_x *= x;
    }

    return accumulator;
  }

bool isValid(int num) {
  while (num % 2 == 0) num /= 2;
  while (num % 3 == 0) num /= 3;
  while (num % 5 == 0) num /= 5;
  while (num % 7 == 0) num /= 7;
  return (num == 1);
}

int findBest(int N) {
  for (int i = 0; i < N; ++i) {
    if (isValid(N + i)) {
      return N + i;
    }
    if (isValid(N - i)) {
      return N - i;
    }
  }
  return 0;
}

std::vector<int> fft_friendly_sizes(int N, int sep, int count) {
    std::vector<int> Ns;
    int c = 0;
    for (int i = N; i < N + sep; ++i) {
        int _N = findBest(i);
        if (std::find(Ns.begin(), Ns.end(), _N) == Ns.end()) {
            if (c == count) {
                break;
            }
            Ns.push_back(_N);
            ++c;
        }
    }
    return Ns;
}

  double linearInterp(std::vector<double> f, std::vector<double> x, double v){

    // assume x sorted (since it comes from a linspace)
    // f is some function evaluated on x

    double h = x[1]-x[0];
    int j = floor( (v-x[0])/h ); // index such that x[j] <= v < x[j+1]

    double x0 = x[j];
    double x1 = x[j+1];
    double y0 = f[j];
    double y1 = f[j+1];

    double f_v = y0 + (v-x0)*( (y1-y0)/(x1-x0) ); // linear interp formula

    return f_v;
  }

// fits for cbeta = Rh/(wh) and error
//  cbetam       - Polynomial fit to c(beta) = R_h/(wh) for monopole 
//  cbetam_inv   - Polynomial fit to c^{-1} for monopole 
//  errmw6       - spline sampling for %-error(beta) for monopole

  // note: the m is for monopole (no torques)
  // use polyEval(coeffs, x) to get c(beta) and c^{-1}(rH/(w*h))
  std::vector<double> cbetam = {
  1.377360225705533e-14,
  -2.780166372816629e-12,
  2.448353284693753e-10,
  -1.237430413656322e-08,
  3.979148502148348e-07,
  -8.561766184042201e-06,
  0.0001272679847510219,
  -0.001354403465648405,
  0.01097749452611932,
  -0.07481288697153615,
  0.5542048130466118};

  std::vector<double> cbetam_inv = {
  4131643418.193291,
  -10471683395.26777,
  11833009228.6429,
  -7851132955.882548,
  3388121732.651829,
  -994285251.2185925,
  201183449.7086889,
  -27776767.88241613,
  2515647.646492857,
  -136305.2970161326,
  3445.959503226691};

  // points on an error spline for w=6, monopole
  // err evaluated on linspace(6,18,1000)
  std::vector<double> errmw6={
  0.9525731647831076,
  0.9452855729417519,
  0.9380261897060487,
  0.9307953286448468,
  0.9235933033269937,
  0.9164204273213383,
  0.9092770141967288,
  0.9021633775220135,
  0.8950798308660414,
  0.8880266877976597,
  0.8810042618857173,
  0.8740128666990626,
  0.867052815806544,
  0.8601244227770103,
  0.8532280011793087,
  0.8463638645822882,
  0.8395323265547971,
  0.8327337006656839,
  0.8259683004837971,
  0.8192364395779843,
  0.8125384315170944,
  0.8058745898699755,
  0.7992452282054763,
  0.7926506600924453,
  0.78609119909973,
  0.7795671587961793,
  0.7730788527506415,
  0.7666265945319649,
  0.7602106977089979,
  0.7538314758505893,
  0.7474892425255865,
  0.7411843113028384,
  0.7349169957511932,
  0.7286876094394993,
  0.7224964659366055,
  0.7163438788113594,
  0.7102301616326097,
  0.7041556279692045,
  0.6981205913899925,
  0.6921253654638224,
  0.6861702637595415,
  0.6802555998459987,
  0.6743816872920425,
  0.6685488396665211,
  0.6627573705382831,
  0.6570075934761763,
  0.6512998220490493,
  0.6456343698257505,
  0.6400115503751284,
  0.6344316772660314,
  0.6288950640673072,
  0.6234020243478047,
  0.617952871676372,
  0.6125479196218578,
  0.6071874817531102,
  0.6018718716389778,
  0.5965998144374096,
  0.5913618785444336,
  0.5861562404212389,
  0.5809826410835329,
  0.5758408215470232,
  0.5707305228274162,
  0.5656514859404195,
  0.5606034519017402,
  0.5555861617270859,
  0.5505993564321637,
  0.5456427770326805,
  0.5407161645443437,
  0.5358192599828605,
  0.5309518043639382,
  0.5261135387032843,
  0.5213042040166054,
  0.5165235413196089,
  0.5117712916280023,
  0.5070471959574926,
  0.5023509953237875,
  0.4976824307425934,
  0.493041243229618,
  0.4884271738005684,
  0.4838399634711519,
  0.479279353257076,
  0.4747450841740474,
  0.4702368972377735,
  0.4657545334639616,
  0.4612977338683188,
  0.4568662394665528,
  0.4524597912743701,
  0.4480781303074783,
  0.4437209975815846,
  0.4393881341123961,
  0.4350792809156204,
  0.4307941790069643,
  0.426532569402135,
  0.42229419311684,
  0.4180787911667864,
  0.4138861045676817,
  0.4097158743352326,
  0.4055678414851465,
  0.4014417470331307,
  0.3973373319948925,
  0.3932543373861392,
  0.3891925042225778,
  0.3851515735199154,
  0.3811312862938594,
  0.3771313835601171,
  0.3731516063343959,
  0.3691916956324025,
  0.3652513924698444,
  0.3613304378624289,
  0.3574285728258629,
  0.3535455383758543,
  0.3496810755281097,
  0.3458278474315878,
  0.341979176748088,
  0.3381357937625787,
  0.3342984287600284,
  0.3304678120254047,
  0.3266446738436762,
  0.3228297444998113,
  0.3190237542787782,
  0.3152274334655454,
  0.3114415123450804,
  0.3076667212023526,
  0.3039037903223293,
  0.3001534499899793,
  0.2964164304902709,
  0.2926934621081718,
  0.2889852751286511,
  0.2852925998366765,
  0.2816161665172164,
  0.2779567054552393,
  0.2743149469357128,
  0.2706916212436062,
  0.2670874586638871,
  0.2635031894815237,
  0.2599395439814847,
  0.256397252448738,
  0.2528770451682523,
  0.2493796524249954,
  0.2459058045039358,
  0.2424562316900417,
  0.2390316642682815,
  0.2356328325236236,
  0.2322604667410358,
  0.2289152972054868,
  0.2255980542019446,
  0.2223094680153777,
  0.2190502689307545,
  0.2158211872330428,
  0.2126229532072111,
  0.2094562971382277,
  0.2063219493110609,
  0.2032206400106792,
  0.2001530995220504,
  0.197120058130143,
  0.1941222461199253,
  0.1911603937763656,
  0.1882352313844322,
  0.1853474892290932,
  0.1824978975953169,
  0.1796871867680717,
  0.1769160870323258,
  0.1741853286730478,
  0.1714956419752054,
  0.1688477572237671,
  0.1662424047037013,
  0.1636803146999762,
  0.1611543601282291,
  0.1586186047461069,
  0.1560671422291718,
  0.1535019766988346,
  0.1509251122765057,
  0.148338553083597,
  0.1457443032415188,
  0.1431443668716829,
  0.1405407480954999,
  0.1379354510343805,
  0.1353304798097364,
  0.132727838542978,
  0.130129531355517,
  0.127537562368764,
  0.1249539357041299,
  0.1223806554830262,
  0.1198197258268633,
  0.117273150857053,
  0.1147429346950059,
  0.1122310814621327,
  0.1097395952798452,
  0.1072704802695536,
  0.1048257405526698,
  0.1024073802506043,
  0.1000174034847679,
  0.09765781437657232,
  0.09533061704742786,
  0.09303781561874624,
  0.09078141421193817,
  0.08856341694841434,
  0.08638582794958645,
  0.08425065133686485,
  0.08215989123166126,
  0.08011555175538634,
  0.07811963702945086,
  0.07617415117526642,
  0.0742810983142435,
  0.07244248256779368,
  0.07066030805732769,
  0.06893657890425632,
  0.06727329922999113,
  0.06567247315594264,
  0.06413610480352236,
  0.06266619829414108,
  0.06126475774920963,
  0.05993378729013944,
  0.05867529103834117,
  0.0574912731152262,
  0.05638373764220539,
  0.05535468874068962,
  0.05440613053209022,
  0.05354006713781795,
  0.05275850267928407,
  0.0520634412778995,
  0.05145688705507517,
  0.05094084413222233,
  0.05047717114518911,
  0.05002618717838069,
  0.04958758702604315,
  0.04916106548242252,
  0.04874631734176506,
  0.04834303739831677,
  0.04795092044632387,
  0.04756966128003244,
  0.04719895469368854,
  0.04683849548153839,
  0.04648797843782801,
  0.04614709835680363,
  0.0458155500327113,
  0.0454930282597971,
  0.04517922783230725,
  0.04487384354448778,
  0.04457657019058488,
  0.04428710256484465,
  0.04400513546151315,
  0.04373036367483656,
  0.04346248199906101,
  0.04320118522843261,
  0.04294616815719746,
  0.04269712557960165,
  0.04245375228989133,
  0.04221574308231266,
  0.04198279275111173,
  0.04175459609053465,
  0.04153084789482751,
  0.04131124295823647,
  0.04109547607500767,
  0.0408832420393872,
  0.04067423564562118,
  0.0404681516879557,
  0.04026468496063691,
  0.04006353025791097,
  0.03986438237402395,
  0.03966693610322199,
  0.03947088623975116,
  0.03927592757785762,
  0.03908175491178752,
  0.03888806303578694,
  0.03869454674410198,
  0.03850090083097882,
  0.03830682009066352,
  0.03811199931740225,
  0.0379161333054411,
  0.03771891684902617,
  0.03752004474240364,
  0.03731921177981956,
  0.03711611275552011,
  0.03691044246375139,
  0.03670189569875947,
  0.03649016725479055,
  0.03627495192609068,
  0.03605664536412812,
  0.03583925331885471,
  0.03562344185113694,
  0.03540918792154969,
  0.0351964684906677,
  0.03498526051906586,
  0.03477554096731895,
  0.03456728679600175,
  0.03436047496568914,
  0.03415508243695587,
  0.03395108617037682,
  0.03374846312652675,
  0.03354719026598047,
  0.03334724454931284,
  0.03314860293709863,
  0.03295124238991269,
  0.03275513986832981,
  0.03256027233292479,
  0.03236661674427249,
  0.03217415006294767,
  0.03198284924952519,
  0.03179269126457986,
  0.03160365306868643,
  0.0314157116224198,
  0.03122884388635471,
  0.03104302682106604,
  0.03085823738712858,
  0.0306744525451171,
  0.03049164925560647,
  0.03030980447917147,
  0.03012889517638694,
  0.02994889830782769,
  0.02976979083406849,
  0.02959154971568422,
  0.02941415191324963,
  0.0292375743873396,
  0.0290617940985289,
  0.02888678800739233,
  0.02871253307450475,
  0.02853900626044093,
  0.02836618452577572,
  0.02819404483108393,
  0.02802256413694032,
  0.02785171940391978,
  0.02768148759259706,
  0.02751184566354702,
  0.02734277057734447,
  0.02717423929456417,
  0.02700622877578101,
  0.02683871598156973,
  0.02667167787250521,
  0.02650509140916223,
  0.02633893355211559,
  0.02617318126194015,
  0.02600781149921066,
  0.025842801224502,
  0.02567594580628443,
  0.02550522629418349,
  0.02533089817050688,
  0.02515321691756224,
  0.0249724380176573,
  0.02478881695309971,
  0.02460260920619711,
  0.02441407025925723,
  0.02422345559458769,
  0.02403102069449623,
  0.0238370210412905,
  0.02364171211727814,
  0.02344534940476688,
  0.02324818838606434,
  0.02305048454347826,
  0.02285249335931627,
  0.02265447031588604,
  0.02245667089549529,
  0.02225935058045164,
  0.02206276485306282,
  0.02186716919563648,
  0.02167281909048028,
  0.0214799700199019,
  0.02128887746620906,
  0.0210997969117094,
  0.0209129838387106,
  0.0207286937295203,
  0.02054718206644622,
  0.02036870433179605,
  0.02019351600787745,
  0.02002187257699807,
  0.01985402952146559,
  0.0196902423235877,
  0.01953076646567209,
  0.01937585743002643,
  0.01922577069895838,
  0.0190807617547756,
  0.01894108607978578,
  0.01880699915629664,
  0.01867875646661581,
  0.01855661349305097,
  0.01844082571790978,
  0.01833164862349995,
  0.01822933769212914,
  0.01813414840610504,
  0.01804633624773531,
  0.01796615669932761,
  0.01789386524318964,
  0.01782971736162908,
  0.01777396853695359,
  0.01772687425147086,
  0.01768868998748854,
  0.01765967122731433,
  0.0176400734532559,
  0.01763015214762093,
  0.01762945848850193,
  0.01763388753721615,
  0.01764264650506847,
  0.01765563195250122,
  0.01767274043995671,
  0.01769386852787724,
  0.01771891277670515,
  0.01774776974688274,
  0.01778033599885233,
  0.01781650809305622,
  0.01785618258993675,
  0.01789925604993624,
  0.01794562503349698,
  0.0179951861010613,
  0.0180478358130715,
  0.01810347072996992,
  0.01816198741219887,
  0.01822328242020065,
  0.01828725231441759,
  0.01835379365529199,
  0.01842280300326618,
  0.01849417691878248,
  0.0185678119622832,
  0.01864360469421064,
  0.01872145167500713,
  0.01880124946511499,
  0.01888289462497653,
  0.01896628371503407,
  0.01905131329572991,
  0.01913787992750638,
  0.01922588017080579,
  0.01931521058607047,
  0.01940576773374272,
  0.01949744817426485,
  0.01959014846807918,
  0.01968376517562803,
  0.01977819485735373,
  0.01987333407369858,
  0.01996907938510489,
  0.02006532735201497,
  0.02016197453487116,
  0.02025891749411577,
  0.02035605279019111,
  0.02045327698353948,
  0.02055048663460321,
  0.02064757830382462,
  0.02074444855164603,
  0.02084099393850975,
  0.02093711102485808,
  0.02103269637113335,
  0.02112764653777787,
  0.02122185808523397,
  0.02131522757394396,
  0.02140765156435014,
  0.02149902661689483,
  0.02158924929202035,
  0.02167946249556518,
  0.02177087470486239,
  0.02186348083759619,
  0.02195727581145082,
  0.02205225454411054,
  0.02214841195325957,
  0.02224574295658215,
  0.02234424247176248,
  0.02244390541648482,
  0.0225447267084334,
  0.02264670126529247,
  0.02274982400474625,
  0.02285408984447896,
  0.02295949370217484,
  0.02306603049551813,
  0.02317369514219307,
  0.0232824825598839,
  0.02339238766627482,
  0.02350340537905007,
  0.02361553061589391,
  0.02372875829449057,
  0.02384308333252428,
  0.02395850064767924,
  0.02407500515763971,
  0.02419259178008993,
  0.02431125543271415,
  0.02443099103319657,
  0.02455179349922142,
  0.02467365774847294,
  0.02479657869863539,
  0.02492055126739299,
  0.02504557037242996,
  0.02517163093143054,
  0.02529872786207896,
  0.02542685608205947,
  0.02555601050905628,
  0.02568618606075366,
  0.02581737765483579,
  0.02594958020898694,
  0.02608278864089135,
  0.02621699786823322,
  0.02635220280869683,
  0.02648839837996636,
  0.02662557949972607,
  0.02676374108566022,
  0.02690287805545299,
  0.02704298532678867,
  0.02718405781735144,
  0.02732609044482556,
  0.02746907812689528,
  0.02761301578124479,
  0.02775789832555837,
  0.02790372067752022,
  0.02805047775481458,
  0.0281981644751257,
  0.02834657923353599,
  0.02849458652471584,
  0.02864210923149545,
  0.02878927217181766,
  0.02893620016362533,
  0.02908301802486123,
  0.02922985057346822,
  0.02937682262738908,
  0.02952405900456666,
  0.0296716845229438,
  0.02981982400046327,
  0.02996860225506795,
  0.03011814410470061,
  0.0302685743673041,
  0.03042001786082126,
  0.03057259940319486,
  0.03072644381236778,
  0.03088167590628279,
  0.03103842050288273,
  0.03119680242011046,
  0.03135694647590874,
  0.03151897748822045,
  0.03168302027498835,
  0.0318491996541553,
  0.03201764044366414,
  0.03218846746145767,
  0.03236180552547869,
  0.03253777945367003,
  0.03271651406397454,
  0.03289813417433504,
  0.03308276460269435,
  0.03327053016699524,
  0.03346155568518059,
  0.03365596597519319,
  0.03385388585497591,
  0.03405544014247154,
  0.03426075365562287,
  0.03446995121237275,
  0.034683157630664,
  0.03490049772843948,
  0.03512209632364199,
  0.03534807823421429,
  0.03557856827809926,
  0.03581369127323971,
  0.0360535720375785,
  0.03629833538905843,
  0.03654810614562226,
  0.03680300912521287,
  0.03706316914577306,
  0.03732871102524572,
  0.03759975958157361,
  0.03787643963269952,
  0.0381588759965663,
  0.03844719349111679,
  0.03874151693429385,
  0.03904197114404026,
  0.03935619222479556,
  0.03969147076016617,
  0.04004741328684507,
  0.04042362634152531,
  0.04081971646089982,
  0.04123529018166152,
  0.04166995404050347,
  0.04212331457411864,
  0.04259497831920011,
  0.04308455181244078,
  0.04359164159053357,
  0.04411585419017153,
  0.04465679614804766,
  0.04521407400085502,
  0.04578729428528652,
  0.04637606353803507,
  0.04697998829579372,
  0.04759867509525548,
  0.04823173047311342,
  0.04887876096606043,
  0.04953937311078941,
  0.05021317344399344,
  0.0508997685023655,
  0.05159876482259868,
  0.05230976894138588,
  0.05303238739541997,
  0.05376622672139404,
  0.05451089345600108,
  0.05526599413593419,
  0.05603113529788625,
  0.05680592347855012,
  0.05758996521461891,
  0.05838286704278561,
  0.05918423549974332,
  0.05999367712218491,
  0.06081079844680323,
  0.06163520601029143,
  0.06246650634934246,
  0.06330430600064943,
  0.06414821150090523,
  0.06499782938680271,
  0.06585276619503497,
  0.066712628462295,
  0.06757702272527594,
  0.06844555552067061,
  0.0693178333851719,
  0.07019346285547291,
  0.07107205046826663,
  0.07195320276024618,
  0.07283652626810441,
  0.0737216275285342,
  0.07460811307822862,
  0.07549558945388071,
  0.07638366319218357,
  0.07727194082983002,
  0.07816418251226401,
  0.07908464121218081,
  0.08003637374395864,
  0.08101825273361331,
  0.08202915080716028,
  0.08306794059061506,
  0.0841334947099934,
  0.08522468579131096,
  0.08634038646058352,
  0.08747946934382655,
  0.08864080706705554,
  0.08982327225628625,
  0.09102573753753435,
  0.09224707553681562,
  0.09348615888014554,
  0.09474186019353956,
  0.09601305210301346,
  0.0972986072345829,
  0.09859739821426372,
  0.09990829766807133,
  0.1012301782220212,
  0.1025619125021291,
  0.1039023731344107,
  0.1052504327448819,
  0.106604963959558,
  0.1079648394044546,
  0.1093289317055873,
  0.110696113488972,
  0.1120652573806243,
  0.1134352360065597,
  0.1148049219927938,
  0.1161731879653422,
  0.1175389065502206,
  0.1189009503734449,
  0.1202581920610306,
  0.1216095042389929,
  0.1229537595333478,
  0.1242898305701111,
  0.125616589975298,
  0.1269329103749246,
  0.1282376643950061,
  0.1295297246615583,
  0.130807963800597,
  0.1320712544381376,
  0.1333184692001959,
  0.1345484807127874,
  0.1357601616019277,
  0.1369523844936327,
  0.1381240220139177,
  0.1392739467887986,
  0.1404010314442909,
  0.1415041486064101,
  0.1425821709011723,
  0.1436339709545925,
  0.1446584213926869,
  0.1456543948414707,
  0.146627988177023,
  0.1475864050559494,
  0.1485301782750547,
  0.1494598406311444,
  0.1503759249210233,
  0.1512789639414969,
  0.1521694904893703,
  0.1530480373614487,
  0.1539151373545373,
  0.1547713232654412,
  0.1556171278909656,
  0.1564530840279159,
  0.157279724473097,
  0.1580975820233143,
  0.1589071894753727,
  0.1597090796260777,
  0.1605037852722344,
  0.1612918392106478,
  0.1620737742381234,
  0.1628501231514661,
  0.1636214187474812,
  0.1643881938229741,
  0.1651509811747496,
  0.1659103135996131,
  0.1666667238943697,
  0.1674207448558247,
  0.1681729092807833,
  0.1689237499660505,
  0.1696737997084317,
  0.1704235913047319,
  0.1711736575517563,
  0.1719245312463103,
  0.1726767451851989,
  0.1734308321652274,
  0.1741873249832008,
  0.1749467564359244,
  0.1757096593202035,
  0.1764765664328431,
  0.1772480105706485,
  0.1780245245304248,
  0.1788066411089772,
  0.1795948931031111,
  0.1803898133096313,
  0.1811919345253434,
  0.1820017895470522,
  0.1828199111715633,
  0.1836468321956814,
  0.184483085416212,
  0.1853292036299603,
  0.1861857196337314,
  0.1870531662243305,
  0.1879320761985627,
  0.1888229823532333,
  0.1897264174851476,
  0.1906429143911105,
  0.191569596152758,
  0.1924867177140888,
  0.1933918632766103,
  0.1942860468056896,
  0.1951702822666931,
  0.1960455836249879,
  0.1969129648459408,
  0.1977734398949185,
  0.198628022737288,
  0.199477727338416,
  0.2003235676636695,
  0.2011665576784151,
  0.2020077113480197,
  0.2028480426378504,
  0.2036885655132736,
  0.2045302939396565,
  0.2053742418823656,
  0.206221423306768,
  0.2070728521782305,
  0.2079295424621198,
  0.2087925081238028,
  0.2096627631286463,
  0.2105413214420172,
  0.2114291970292823,
  0.2123274038558084,
  0.2132369558869624,
  0.214158867088111,
  0.2150941514246211,
  0.2160438228618597,
  0.2170088953651934,
  0.2179903828999891,
  0.2189892994316136,
  0.2200066589254338,
  0.2210434753468166,
  0.2221007626611285,
  0.2231795348337369,
  0.224280805830008,
  0.225405589615309,
  0.2265549001550068,
  0.2277297514144679,
  0.2289311573590595,
  0.2301601319541481,
  0.2314176891651006,
  0.2327048429572842,
  0.2340226072960652,
  0.2353719961468109,
  0.2367540234748877,
  0.2381697032456626,
  0.2396200494245027,
  0.2411060759767744,
  0.242628796867845,
  0.2441892260630807,
  0.2457883775278488,
  0.2474272652275163,
  0.2491069031274494,
  0.2508283051930156,
  0.252686631467668,
  0.2547716247838686,
  0.257076173290497,
  0.2595931651364319,
  0.2623154884705531,
  0.2652360314417391,
  0.2683476821988695,
  0.2716433288908241,
  0.2751158596664811,
  0.2787581626747208,
  0.2825631260644212,
  0.2865236379844623,
  0.2906325865837238,
  0.2948828600110838,
  0.2992673464154226,
  0.3037789339456184,
  0.3084105107505516,
  0.3131549649791002,
  0.3180051847801439,
  0.3229540583025629,
  0.3279944736952347,
  0.3331193191070403,
  0.3383214826868572,
  0.3435938525835656,
  0.3489293169460453,
  0.3543207639231741,
  0.3597610816638328,
  0.365243158316899,
  0.3707598820312527,
  0.376304140955774,
  0.3818688232393406,
  0.3874468170308332,
  0.3930310104791295,
  0.3986142917331094,
  0.4041895489416532,
  0.4097496702536382,
  0.4152875438179455,
  0.4207960577834526,
  0.4262681002990397,
  0.4316965595135867,
  0.4370743235759711,
  0.4423942806350739,
  0.4476493188397728,
  0.4528323263389476,
  0.4579361912814784,
  0.4629538018162431,
  0.4678780460921222,
  0.4727018122579936,
  0.4774179884627371,
  0.4820194628552328,
  0.4864991235843584,
  0.4908498587989946,
  0.4950645566480192,
  0.4991361052803123,
  0.5030573928447535,
  0.5068438325434408,
  0.5106253407307026,
  0.5144221296509536,
  0.5182320951494052,
  0.5220531330712691,
  0.5258831392617527,
  0.5297200095660708,
  0.5335616398294308,
  0.5374059258970443,
  0.5412507636141231,
  0.5450940488258741,
  0.5489336773775126,
  0.5527675451142459,
  0.5565935478812855,
  0.560409581523843,
  0.5642135418871259,
  0.568003324816349,
  0.5717768261567197,
  0.5755319417534493,
  0.57926656745175,
  0.5829785990968288,
  0.5866659325339005,
  0.5903264636081728,
  0.593958088164857,
  0.5975587020491647,
  0.6011262011063035,
  0.6046584811814881,
  0.6081534381199261,
  0.6116089677668288,
  0.6150229659674079,
  0.618393328566871,
  0.6217179514104327,
  0.6249947303433004,
  0.6282215612106858,
  0.6313963398578004,
  0.6345169621298521,
  0.6375813238720548,
  0.6405873209296166,
  0.6435328491477489,
  0.6464158043716631,
  0.6492340824465673,
  0.6519855792176754,
  0.6546681905301954,
  0.6572798122293387,
  0.6598183401603167,
  0.6622816701683377,
  0.6646676980986153,
  0.6669743197963576,
  0.6691994311067762,
  0.671340927875082,
  0.673396705946484,
  0.6753646611661951,
  0.677242689379424,
  0.6790286864313819,
  0.6807205481672799,
  0.6823161704323271,
  0.6838304785813695,
  0.6852814893459274,
  0.6866717356362277,
  0.6880037503624977,
  0.6892800664349626,
  0.6905032167638507,
  0.6916757342593876,
  0.6928001518318,
  0.6938790023913151,
  0.6949148188481585,
  0.6959101341125581,
  0.6968674810947395,
  0.6977893927049298,
  0.6986784018533557,
  0.6995370414502433,
  0.70036784440582,
  0.7011733436303118,
  0.7019560720339456,
  0.7027185625269482,
  0.7034633480195456,
  0.7041929614219652,
  0.7049099356444332,
  0.7056168035971762,
  0.7063160981904211,
  0.7070103523343939,
  0.7077020989393222,
  0.7083938709154319,
  0.7090882011729499,
  0.7097876226221029,
  0.7104946681731171,
  0.7112118707362197,
  0.711941763221637,
  0.7126868785395957,
  0.7134497496003225,
  0.7142329093140436,
  0.7150388905909864,
  0.7158702263413769,
  0.7167294494754418,
  0.7176190929034083,
  0.7185416895355019,
  0.7194997722819506,
  0.7204958740529801,
  0.7215325277588172,
  0.7226122663096889,
  0.723737622615821,
  0.7249111295874412,
  0.7261353201347753,
  0.7274127271680502,
  0.728745883597493,
  0.7301373223333291,
  0.7315895762857867,
  0.7331051783650911,
  0.7346866614814697,
  0.7363365585451491,
  0.738057402466355,
  0.7398785533028428,
  0.7419607820963621,
  0.7443264856453666,
  0.7469709308503795,
  0.7498893846119201,
  0.753077113830514,
  0.7565293854066806,
  0.7602414662409426,
  0.7642086232338233,
  0.7684261232858411,
  0.7728892332975231,
  0.7775932201693875,
  0.7825333508019574,
  0.7877048920957564,
  0.7931031109513037,
  0.7987232742691227,
  0.8045606489497353,
  0.8106105018936637,
  0.8168681000014316,
  0.8233287101735576,
  0.8299875993105652,
  0.8368400343129767,
  0.843881282081314,
  0.8511066095161013,
  0.8585112835178563,
  0.8660905709871033,
  0.8738397388243642,
  0.8817540539301609,
  0.889828783205018,
  0.8980591935494527,
  0.9064405518639895,
  0.9149681250491501,
  0.923637180005457,
  0.9324429836334344,
  0.9413808028335993,
  0.9504459045064764,
  0.9596335555525874,
  0.9689390228724546,
  0.9783575733666029,
  0.9878844739355486,
  0.9975149914798163,
  1.007244392899928,
  1.017067945096407,
  1.026980914969776,
  1.036978569420553,
  1.047056175349262,
  1.057208999656426,
  1.067432309242565,
  1.077721371008207,
  1.088071451853865,
  1.098477818680066,
  1.108935738387332,
  1.119440477876184,
  1.129987304047147,
  1.140571483800738,
  1.151188284037481};

};
#endif
